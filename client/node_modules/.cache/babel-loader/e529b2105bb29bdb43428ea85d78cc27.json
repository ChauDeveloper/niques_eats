{"ast":null,"code":"var _jsxFileName = \"/Users/chau/UCF_BC/projects/niques_eats/client/src/components/CategoryMenuDinner/index.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { Col, Row } from \"reactstrap\";\nimport \"./style.css\";\n\nfunction CategoryMenuDinner(_ref) {\n  let {} = _ref;\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Row, {\n    id: \"nav-buttons-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, categories.map(item => // below is the way to ask the app to ignore these item in category list\n  item.name === 'Main Dishes' || item.name === 'Sides' || item.name === 'Drinks' || /*#__PURE__*/React.createElement(\"button\", {\n    class: \"menu-nav-buttons-dinner\",\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, item.name))));\n}\n\nexport default CategoryMenuDinner;","map":{"version":3,"sources":["/Users/chau/UCF_BC/projects/niques_eats/client/src/components/CategoryMenuDinner/index.js"],"names":["React","useEffect","useQuery","QUERY_CATEGORIES","useStoreContext","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","idbPromise","Col","Row","CategoryMenuDinner","state","dispatch","categories","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","map","item","name","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,qBAA3D;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SACCC,GADD,EAECC,GAFD,QAGO,YAHP;AAIA,OAAO,aAAP;;AAEA,SAASC,kBAAT,OAAkC;AAAA,MAAN,EAAM;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,eAAe,EAAzC;AAEA,QAAM;AAAES,IAAAA;AAAF,MAAiBF,KAAvB;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCd,QAAQ,CAACC,gBAAD,CAAhD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIe,YAAJ,EAAkB;AAChB;AACAJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEZ,iBADC;AAEPQ,QAAAA,UAAU,EAAEG,YAAY,CAACH;AAFlB,OAAD,CAAR;AAIAG,MAAAA,YAAY,CAACH,UAAb,CAAwBK,OAAxB,CAAgCC,QAAQ,IAAI;AAC1CZ,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBY,QAAtB,CAAV;AACD,OAFD;AAGD,KATD,MASO,IAAI,CAACL,OAAL,EAAc;AACnBP,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCa,IAAhC,CAAqCP,UAAU,IAAI;AACjDD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEZ,iBADC;AAEPQ,UAAAA,UAAU,EAAEA;AAFL,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAnBQ,EAmBN,CAACG,YAAD,EAAeJ,QAAf,CAnBM,CAAT;;AAsBA,QAAMS,WAAW,GAAGC,EAAE,IAAI;AACxBV,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX,uBADC;AAEPiB,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD;;AAOA,sBACC,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCT,UAAU,CAACW,GAAX,CAAeC,IAAI,IAClB;AACAA,EAAAA,IAAI,CAACC,IAAL,KAAc,aAAd,IAA+BD,IAAI,CAACC,IAAL,KAAc,OAA7C,IAAwDD,IAAI,CAACC,IAAL,KAAc,QAAtE,iBACA;AAAQ,IAAA,KAAK,EAAC,yBAAd;AACE,IAAA,GAAG,EAAED,IAAI,CAACE,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbN,MAAAA,WAAW,CAACI,IAAI,CAACE,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGF,IAAI,CAACC,IANR,CAHD,CADD,CADD,CADD;AAkBD;;AAED,eAAehB,kBAAf","sourcesContent":["import React, { useEffect } from 'react'; \nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport {\n\tCol,\n\tRow,\n} from \"reactstrap\";\nimport \"./style.css\"\n\nfunction CategoryMenuDinner({  }) {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n  \n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, dispatch]);\n\n   \n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n   <Row id=\"nav-buttons-row\">\n    <Col>\n    {categories.map(item => (     \n      // below is the way to ask the app to ignore these item in category list\n      item.name === 'Main Dishes' || item.name === 'Sides' || item.name === 'Drinks' ||\n      <button class=\"menu-nav-buttons-dinner\"\n        key={item._id}\n        onClick={() => {\n          handleClick(item._id);\n        }}\n        >\n        {item.name}\n      </button>\n    ))}\n    </Col>\n  </Row>\n);\n}\n\nexport default CategoryMenuDinner;\n"]},"metadata":{},"sourceType":"module"}