{"ast":null,"code":"var _jsxFileName = \"/Users/chau/UCF_BC/projects/niques_eats/client/src/components/BrunchDishes/index.js\";\nimport React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useProductReducer } from \"../../utils/reducers\";\n\nfunction ProductList(_ref) {\n  let {} = _ref;\n  const [state, dispatch] = useStoreContext();\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  const products = (data === null || data === void 0 ? void 0 : data.products) || []; // console.log(products);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise(\"products\", \"put\", product);\n      }); // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise(\"products\", \"get\").then(products => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }\n  }, state.products.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row row-cols-1 row-cols-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, filterProducts().map(product =>\n  /*#__PURE__*/\n  //   product.category === categories[0]._id ||\n  React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    description: product.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["/Users/chau/UCF_BC/projects/niques_eats/client/src/components/BrunchDishes/index.js"],"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","spinner","useStoreContext","UPDATE_PRODUCTS","idbPromise","useProductReducer","ProductList","state","dispatch","currentCategory","loading","data","products","type","forEach","product","then","filterProducts","filter","category","_id","length","map","image","name","price","description"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useProductReducer } from \"../../utils/reducers\";\n\nfunction ProductList({}) {\n\tconst [state, dispatch] = useStoreContext();\n\n\tconst { currentCategory } = state;\n\n\tconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\n\tconst products = data?.products || [];\n\t// console.log(products);\n\n\tuseEffect(() => {\n\t\tif (data) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\tproducts: data.products,\n\t\t\t});\n\n\t\t\tdata.products.forEach((product) => {\n\t\t\t\tidbPromise(\"products\", \"put\", product);\n\t\t\t});\n\t\t\t// add else if to check if `loading` is undefined in `useQuery()` Hook\n\t\t} else if (!loading) {\n\t\t\t// since we're offline, get all of the data from the `products` store\n\t\t\tidbPromise(\"products\", \"get\").then((products) => {\n\t\t\t\t// use retrieved data to set global state for offline browsing\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\t\tproducts: products,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [data, loading, dispatch]);\n\n\tfunction filterProducts() {\n\t\tif (!currentCategory) {\n\t\t\treturn state.products;\n\t\t}\n\n\t\treturn state.products.filter(\n\t\t\t(product) => product.category._id === currentCategory\n\t\t);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{state.products.length ? (\n\t\t\t\t<div className=\"row row-cols-1 row-cols-md-3\">\n\t\t\t\t\t{filterProducts().map((product) => (\n\t\t\t\t\t\t//   product.category === categories[0]._id ||\n\t\t\t\t\t\t<ProductItem\n\t\t\t\t\t\t\tkey={product._id}\n\t\t\t\t\t\t\t_id={product._id}\n\t\t\t\t\t\t\timage={product.image}\n\t\t\t\t\t\t\tname={product.name}\n\t\t\t\t\t\t\tprice={product.price}\n\t\t\t\t\t\t\tdescription={product.description}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<h3>You haven't added any products yet!</h3>\n\t\t\t)}\n\t\t\t{loading ? <img src={spinner} alt=\"loading\" /> : null}\n\t\t</div>\n\t);\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}