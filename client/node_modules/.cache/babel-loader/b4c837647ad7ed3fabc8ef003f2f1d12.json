{"ast":null,"code":"var _jsxFileName = \"/Users/chau/UCF_BC/projects/niques_eats/client/src/components/ProductList/index.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useProductReducer } from '../../utils/reducers';\nimport { ADD_ORDER } from '../../utils/mutations';\n\nfunction ProductList(_ref) {\n  let {} = _ref;\n  const [state, dispatch] = useStoreContext();\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      }); // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then(products => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, state.products.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row row-cols-1 row-cols-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    description: product.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 18\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["/Users/chau/UCF_BC/projects/niques_eats/client/src/components/ProductList/index.js"],"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","spinner","useStoreContext","UPDATE_PRODUCTS","idbPromise","useProductReducer","ADD_ORDER","ProductList","state","dispatch","currentCategory","loading","data","type","products","forEach","product","then","filterProducts","filter","category","_id","length","map","image","name","price","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,SAAT,QAA0B,uBAA1B;;AAEA,SAASC,WAAT,OAA2B;AAAA,MAAN,EAAM;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,eAAe,EAAzC;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAsBF,KAA5B;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBd,QAAQ,CAACE,cAAD,CAAlC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGe,IAAH,EAAS;AACPH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEV,eADC;AAEPW,QAAAA,QAAQ,EAAEF,IAAI,CAACE;AAFR,OAAD,CAAR;AAKAF,MAAAA,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAuBC,OAAD,IAAa;AACjCZ,QAAAA,UAAU,CAAC,UAAD,EAAa,KAAb,EAAoBY,OAApB,CAAV;AACD,OAFD,EANO,CASP;AACD,KAVD,MAUO,IAAI,CAACL,OAAL,EAAc;AACnB;AACAP,MAAAA,UAAU,CAAC,UAAD,EAAa,KAAb,CAAV,CAA8Ba,IAA9B,CAAoCH,QAAD,IAAc;AAC/C;AACAL,QAAAA,QAAQ,CAAC;AACPI,UAAAA,IAAI,EAAEV,eADC;AAEPW,UAAAA,QAAQ,EAAEA;AAFH,SAAD,CAAR;AAID,OAND;AAOD;AACF,GArBQ,EAqBN,CAACF,IAAD,EAAOD,OAAP,EAAgBF,QAAhB,CArBM,CAAT;;AAuBA,WAASS,cAAT,GAA0B;AACxB,QAAI,CAACR,eAAL,EAAsB;AACpB,aAAOF,KAAK,CAACM,QAAb;AACD;;AAED,WAAON,KAAK,CAACM,QAAN,CAAeK,MAAf,CAAsBH,OAAO,IAClCA,OAAO,CAACI,QAAR,CAAiBC,GAAjB,KAAyBX,eADpB,CAAP;AAED;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACM,QAAN,CAAeQ,MAAf,gBACC;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,cAAc,GAAGK,GAAjB,CAAsBP,OAAD,iBACpB,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEA,OAAO,CAACK,GADf;AAEE,IAAA,GAAG,EAAEL,OAAO,CAACK,GAFf;AAGE,IAAA,KAAK,EAAEL,OAAO,CAACQ,KAHjB;AAIE,IAAA,IAAI,EAAER,OAAO,CAACS,IAJhB;AAKE,IAAA,KAAK,EAAET,OAAO,CAACU,KALjB;AAME,IAAA,WAAW,EAAEV,OAAO,CAACW,WANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADD,gBAeC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAhBJ,EAkBGhB,OAAO,gBAAG;AAAK,IAAA,GAAG,EAAEV,OAAV;AAAmB,IAAA,GAAG,EAAC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAyC,IAlBnD,CADF;AAsBD;;AAED,eAAeM,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useProductReducer } from '../../utils/reducers';\nimport { ADD_ORDER } from '../../utils/mutations';\n\nfunction ProductList({  }) {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  useEffect(() => {\n    if(data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n  \n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n  \n    return state.products.filter(product => \n      product.category._id === currentCategory);\n  }\n\n  return (\n    <div >\n      {state.products.length ? (\n        <div className=\"row row-cols-1 row-cols-md-3\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              description={product.description}\n              \n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}